import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

/*
Count no of Palindromes in a String
-> Palindrome Length should be equal to String length
-> Get only Unique Palindrome Count
-> Use all characters of a STring

Brute Force :
 Permutate All combinations of String chars, Validate if it is a unique palidrome{Set}
, If yes, add to resultSet
   
*/
public class Solution {
    public static void main(String args[] ) throws Exception {
        System.out.println("Hello World");
        String s="madam";
    }
    
    int count =0;
    private int countPalidrome(String str){
        if(str==null || str.length()==0){
            return 0;
        }
        Set<String> set = new HashSet<>();
        boolean isPal = isPalindrome (str);
        set.add(str);
        return palindromeHelper(str,0,1,set);
    }
    
    private int palindromeHelper(String s,int i, int j,Set<String> set){
        while(i<s.length()-1 ){
            while(j<s.length()-1){
                String str = swap(s,i,j);
                if(isPalindrome(str) && !set.contains(str) ){
                    set.add(str);
                    count++;
                }
                j++;
            }
            i++;
        }
        return count;
    }
    
    private boolean isPalindrome(String s){
        int i=0,j=s.length()-1;
        while(i<j){
            if(s.charAt(i)!=s.charAt(j) ){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    
    private String swap(String s,int i, int j){
        if(i>=s.length() || j>=s.length()){
            return s;
        }
        char[] chArr = s.toCharArray();
        char temp = s.charAt(i);
        chArr[i] = chArr[j];
        chArr[j] = temp;
        return chArr.toString();
    }
    
}